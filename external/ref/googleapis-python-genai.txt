========================
CODE SNIPPETS
========================
TITLE: Install Google Gen AI SDK
DESCRIPTION: Installs the Google Gen AI Python SDK using pip. This is the primary step to get the library into your Python environment.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_0

LANGUAGE: shell
CODE:
```
pip install google-genai
```

----------------------------------------

TITLE: LiveMusicClientSetup and LiveMusicClientSetupDict
DESCRIPTION: Defines the setup configuration for the live music client, specifying the model to be used. This is part of the initial setup for music generation services.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_300

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetup:
  model: str
    The model to use for music generation.

LiveMusicClientSetupDict:
  model: str
    The model to use for music generation.
```

----------------------------------------

TITLE: Gemini Preference Examples (genai.types)
DESCRIPTION: Classes for defining example completions and general examples for Gemini preferences.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_138

LANGUAGE: APIDOC
CODE:
```
genai.types.GeminiPreferenceExampleCompletionDict
  Dictionary representation of a Gemini preference example completion.

genai.types.GeminiPreferenceExampleDict
  Dictionary representation of a Gemini preference example.
```

----------------------------------------

TITLE: Google Gen AI SDK - Installation and Client Creation
DESCRIPTION: Provides instructions for installing the Google Gen AI SDK and creating a client instance. Covers API selection, asynchronous client options, and proxy configuration.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_464

LANGUAGE: APIDOC
CODE:
```
Installation:
  pip install google-generativeai

Client Creation:
  import google.generativeai as genai

  # API Selection (e.g., Gemini Pro)
  genai.configure(api_key="YOUR_API_KEY")

  # Faster async client option: Aiohttp
  # pip install aiohttp
  # genai.configure(api_key="YOUR_API_KEY", client_options={'use_aiohttp': True})

  # Proxy Configuration
  # genai.configure(api_key="YOUR_API_KEY", client_options={'proxy': 'http://localhost:8080'})
```

----------------------------------------

TITLE: Live Client Setup and Audio Transcription
DESCRIPTION: This section covers configuration for live client setup, specifically the attribute for input audio transcription and its dictionary representation.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_179

LANGUAGE: APIDOC
CODE:
```
input_audio_transcription (genai.types.LiveClientSetup attribute)
  Configuration for input audio transcription in live client setup.

input_audio_transcription (genai.types.LiveClientSetupDict attribute)
  Configuration for input audio transcription in live client setup, in dictionary format.
```

----------------------------------------

TITLE: Install Google Gen AI SDK
DESCRIPTION: Installs the Google Gen AI Python SDK using pip. This is the primary step to begin using the library in your Python projects.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install google-genai
```

----------------------------------------

TITLE: Gemini API SDK Installation
DESCRIPTION: Instructions for installing the correct Google GenAI SDK for Python. It highlights the correct package to use and explicitly mentions deprecated packages to avoid.

SOURCE: https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install google-genai
```

----------------------------------------

TITLE: GenAI Schema Example
DESCRIPTION: Provides an example value for a schema.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_115

LANGUAGE: APIDOC
CODE:
```
genai.types.Schema.example
  - An example value conforming to the schema.

genai.types.SchemaDict.example
  - An example value conforming to the schema (dictionary format).
```

----------------------------------------

TITLE: LiveClientSetup Fields
DESCRIPTION: Defines the setup configuration for a live client, including context window compression and generation configuration.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_291

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  context_window_compression: Optional[bool]
    Whether to use context window compression.
  generation_config: Optional[Dict[str, Any]]
    Configuration for generation.
```

----------------------------------------

TITLE: GeminiPreferenceExample API Documentation
DESCRIPTION: Represents an example used for Gemini model preferences, including completions and content.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_192

LANGUAGE: APIDOC
CODE:
```
GeminiPreferenceExample:
  completions: A list of preferred completions for the example.
  contents: The content associated with the preference example.
```

----------------------------------------

TITLE: GenAI Tuning Dataset Examples
DESCRIPTION: Refers to examples within a tuning dataset.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_116

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningDataset.examples
  - A collection of examples for tuning.

genai.types.TuningDatasetDict.examples
  - A collection of examples for tuning (dictionary format).
```

----------------------------------------

TITLE: LiveMusicClientSetup and LiveMusicClientSetupDict
DESCRIPTION: Specifies the setup configuration for the live music client, primarily defining the model to be used. The Dict version is for dictionary-based representation.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_233

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetup:
  model: str
    The name or identifier of the music model to use.

LiveMusicClientSetupDict:
  model: str
    The name or identifier of the music model to use.
```

----------------------------------------

TITLE: TuningExample Fields
DESCRIPTION: Describes the fields for TuningExample, including 'output' and 'text_input'. These fields represent a single example used for model tuning.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_389

LANGUAGE: APIDOC
CODE:
```
TuningExample:
  output: str
    The desired output for the given input.
  text_input: str
    The text input for the tuning example.
```

----------------------------------------

TITLE: SupervisedTuningDataStats Fields
DESCRIPTION: Provides details on the fields available in the SupervisedTuningDataStats class, including truncated example indices, tuning dataset example count, tuning step count, user dataset examples, and token distributions for user input and output.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_358

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStats:
  truncated_example_indices: List[int]
    Indices of examples that were truncated.
  tuning_dataset_example_count: int
    The total number of examples in the tuning dataset.
  tuning_step_count: int
    The number of tuning steps performed.
  user_dataset_examples: List[Dict]
    A list of examples from the user's dataset.
  user_input_token_distribution: Dict
    Token distribution for user input.
  user_message_per_example_distribution: Dict
    Distribution of user messages per example.
  user_output_token_distribution: Dict
    Token distribution for user output.
```

----------------------------------------

TITLE: Caches - Create and Get
DESCRIPTION: Explains how to create and retrieve cache entries.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_478

LANGUAGE: APIDOC
CODE:
```
Caches:
  # Create
  # cache_id = genai.create_cache(name='my-cache')
  # print(f'Created cache: {cache_id}')

  # Get
  # cache_data = genai.get_cache('cache-id')
  # print(f'Cache data: {cache_data}')
```

----------------------------------------

TITLE: TuningExampleDict Fields
DESCRIPTION: Outlines the fields within TuningExampleDict, mirroring TuningExample with 'output' and 'text_input'. This dictionary format represents a tuning example.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_390

LANGUAGE: APIDOC
CODE:
```
TuningExampleDict:
  output: str
    The desired output for the given input.
  text_input: str
    The text input for the tuning example.
```

----------------------------------------

TITLE: Download File for Upload
DESCRIPTION: Downloads a sample file from a specified URL using `wget`. This is a prerequisite step for the file upload example, preparing the data to be sent to the API.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_13

LANGUAGE: console
CODE:
```
!wget -q https://storage.googleapis.com/generativeai-downloads/data/a11.txt
```

----------------------------------------

TITLE: LiveServerSetupCompleteDict Attributes
DESCRIPTION: Outlines the attributes for LiveServerSetupCompleteDict, a dictionary format for server setup completion messages. It includes the session ID confirming the successful setup of the server session.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_253

LANGUAGE: APIDOC
CODE:
```
LiveServerSetupCompleteDict:
  session_id: The unique identifier for the server session.
```

----------------------------------------

TITLE: Listing Base Models (Synchronous)
DESCRIPTION: Provides examples of how to list available generative AI models using the synchronous client. It covers basic listing and paginated retrieval.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_25

LANGUAGE: python
CODE:
```
# Basic listing
for model in client.models.list():
    print(model)

# Paginated listing
pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
await pager.next_page() # Note: This example uses await, implying async context or a future method
print(pager[0])
```

----------------------------------------

TITLE: Gemini Preference Example Types
DESCRIPTION: Defines types for Gemini preference examples, used for providing feedback or examples to the model. Includes structures for completions and their scores, as well as dictionary representations.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_111

LANGUAGE: APIDOC
CODE:
```
GeminiPreferenceExample
  Represents an example for Gemini preferences.
  Attributes:
    completions: A list of GeminiPreferenceExampleCompletion objects.
    contents: A list of content objects.

GeminiPreferenceExampleCompletion
  Represents a completion within a Gemini preference example.
  Attributes:
    completion: The completion text.
    score: The score assigned to the completion.

GeminiPreferenceExampleCompletionDict
  A dictionary representation of GeminiPreferenceExampleCompletion.
  Attributes:
    completion: The completion text.
    score: The score assigned to the completion.

GeminiPreferenceExampleDict
  A dictionary representation of GeminiPreferenceExample.
  Attributes:
    completions: A list of GeminiPreferenceExampleCompletionDict objects.
    contents: A list of content objects.
```

----------------------------------------

TITLE: Generate Content with Text
DESCRIPTION: Shows a basic example of generating content using the `generate_content` method with a simple text prompt.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_8

LANGUAGE: python
CODE:
```
response = client.models.generate_content(
    model='gemini-2.0-flash-001', contents='Why is the sky blue?'
)
print(response.text)
```

----------------------------------------

TITLE: GenAI Supervised Tuning Dropped Example Reasons
DESCRIPTION: Documents the 'dropped_example_reasons' attribute for supervised tuning data statistics. This attribute lists reasons why examples might have been dropped during the tuning process.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_82

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningDataStats.dropped_example_reasons
  Reasons for dropping examples during supervised tuning.

genai.types.SupervisedTuningDataStatsDict.dropped_example_reasons
  Reasons for dropping examples during supervised tuning.
```

----------------------------------------

TITLE: List Base Models
DESCRIPTION: Provides an example of listing available base models using the `client.models.list()` method. It also demonstrates how to paginate through the model list using a configuration with `page_size` and accessing individual models.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_20

LANGUAGE: python
CODE:
```
for model in client.models.list():
    print(model)

pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: TuningExample Attributes
DESCRIPTION: Details the attributes of the TuningExample type, representing a single example for model tuning. It includes output and text_input for defining the input-output pairs.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_429

LANGUAGE: APIDOC
CODE:
```
TuningExample:
  output: The desired output for the given input.
  text_input: The input text for the tuning example.
```

----------------------------------------

TITLE: GeminiPreferenceExampleCompletion API Documentation
DESCRIPTION: Details a specific completion within a Gemini preference example, including its score.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_193

LANGUAGE: APIDOC
CODE:
```
GeminiPreferenceExampleCompletion:
  completion: The text of the completion.
  score: A score indicating the preference for this completion.
```

----------------------------------------

TITLE: List Base Models (Synchronous)
DESCRIPTION: Provides an example of synchronously listing available models using `client.models.list()`. It also shows how to use pagination with `page_size` and access individual items or subsequent pages.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_24

LANGUAGE: python
CODE:
```
for model in client.models.list():
    print(model)
```

LANGUAGE: python
CODE:
```
pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: Create and Manage Tuning Jobs
DESCRIPTION: Provides a comprehensive guide to supervised fine-tuning using Vertex AI. It covers creating a tuning job with a GCS dataset, retrieving the job status, and waiting for completion.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_55

LANGUAGE: python
CODE:
```
model = 'gemini-2.0-flash-001'
training_dataset = types.TuningDataset(
    gcs_uri='gs://cloud-samples-data/ai-platform/generative_ai/gemini-1_5/text/sft_train_data.jsonl',
)

tuning_job = client.tunings.tune(
    base_model=model,
    training_dataset=training_dataset,
    config=types.CreateTuningJobConfig(
        epoch_count=1, tuned_model_display_name='test_dataset_examples model'
    ),
)
print(tuning_job)

tuning_job = client.tunings.get(name=tuning_job.name)

completed_states = set(
    [
        'JOB_STATE_SUCCEEDED',
        'JOB_STATE_FAILED',
        'JOB_STATE_CANCELLED',
    ]
)

while tuning_job.state not in completed_states:
    print(tuning_job.state)
    tuning_job = client.tunings.get(name=tuning_job.name)
    time.sleep(10)
```

----------------------------------------

TITLE: List and Paginate Tuned Models
DESCRIPTION: Illustrates how to list available tuned models and manage pagination. It includes examples of iterating through models, accessing page size, and fetching the next page.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_58

LANGUAGE: python
CODE:
```
for model in client.models.list(config={'page_size': 10, 'query_base': False}}):
    print(model)

pager = client.models.list(config={'page_size': 10, 'query_base': False}})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: Generate Videos with Veo (Python)
DESCRIPTION: Illustrates how to generate videos using the Veo models. This example includes specifying the model, prompt, an optional input image, and configuration for person generation, aspect ratio, number of videos, and duration. Note: Veo usage may incur costs.

SOURCE: https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md#_snippet_16

LANGUAGE: python
CODE:
```
import time
from google import genai
from google.genai import types
from PIL import Image

client = genai.Client()

PIL_image = Image.open("path/to/image.png") # Optional

operation = client.models.generate_videos(
    model="veo-2.0-generate-001",
    prompt="Panning wide shot of a calico kitten sleeping in the sunshine",
    image = PIL_image,
    config=types.GenerateVideosConfig(
        person_generation="dont_allow",  # "dont_allow" or "allow_adult"
        aspect_ratio="16:9",  # "16:9" or "9:16"
        number_of_videos=1, # supported value is 1-4, use 1 by default
        duration_seconds=8, # supported value is 5-8
    ),
)

while not operation.done:
    time.sleep(20)
    operation = client.operations.get(operation)

for n, generated_video in enumerate(operation.response.generated_videos):
    client.files.download(file=generated_video.video) # just file=, no need for path= as it doesn't save yet
    generated_video.video.save(f"video{n}.mp4")  # saves the video
```

----------------------------------------

TITLE: Generate Content - Asynchronous
DESCRIPTION: Provides examples for asynchronous content generation, both non-streaming and streaming.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_472

LANGUAGE: APIDOC
CODE:
```
Generate Content (Asynchronous Non-Streaming):
  # async def generate_content_async():
  #     response = await model.generate_content_async(...)
  #     print(response.text)
  # asyncio.run(generate_content_async())

Generate Content (Asynchronous Streaming):
  # async def generate_content_stream_async():
  #     response = await model.generate_content_async(..., stream=True)
  #     async for chunk in response:
  #         print(chunk.text)
  # asyncio.run(generate_content_stream_async())
```

----------------------------------------

TITLE: GenAI get() Method
DESCRIPTION: The `get()` method is available across multiple modules for retrieving resources. It is implemented for asynchronous and synchronous versions of Batches, Caches, Files, Models, and Tunings.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_150

LANGUAGE: APIDOC
CODE:
```
AsyncBatches.get(): Retrieves batch information asynchronously.
Batches.get(): Retrieves batch information synchronously.
AsyncCaches.get(): Retrieves cache information asynchronously.
Caches.get(): Retrieves cache information synchronously.
AsyncFiles.get(): Retrieves file information asynchronously.
Files.get(): Retrieves file information synchronously.
AsyncModels.get(): Retrieves model information asynchronously.
Models.get(): Retrieves model information synchronously.
AsyncTunings.get(): Retrieves tuning information asynchronously.
Tunings.get(): Retrieves tuning information synchronously.

```

----------------------------------------

TITLE: List Base Models (Asynchronous)
DESCRIPTION: Demonstrates asynchronously listing available models using `client.aio.models.list()`. It includes examples of iterating through async results, using async pagination with `page_size`, and fetching the next page.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_25

LANGUAGE: python
CODE:
```
async for job in await client.aio.models.list():
    print(job)
```

LANGUAGE: python
CODE:
```
async_pager = await client.aio.models.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: Get Tuning Job Status
DESCRIPTION: Retrieves the current status of a model tuning job. The example includes a loop that polls the job status periodically until it reaches a completed state (succeeded, failed, or cancelled).

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_67

LANGUAGE: python
CODE:
```
tuning_job = client.tunings.get(name=tuning_job.name)
print(tuning_job)
```

LANGUAGE: python
CODE:
```
import time

completed_states = set(
    [
        'JOB_STATE_SUCCEEDED',
        'JOB_STATE_FAILED',
        'JOB_STATE_CANCELLED',
    ]
)

while tuning_job.state not in completed_states:
    print(tuning_job.state)
    tuning_job = client.tunings.get(name=tuning_job.name)
    time.sleep(10)
```

----------------------------------------

TITLE: LiveClientSetup and LiveClientSetupDict Configuration Options
DESCRIPTION: Describes the configuration parameters for setting up the LiveClient, including context window compression, generation configuration, audio transcription settings, model selection, proactivity, session resumption, system instructions, and tools.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_225

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  context_window_compression: Configuration for context window compression.
  generation_config: Settings for controlling response generation.
  input_audio_transcription: Configuration for input audio transcription.
  model: Specifies the model to be used.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Settings related to the client's proactivity.
  session_resumption: Configuration for resuming previous sessions.
  system_instruction: Instructions provided to the system.
  tools: A list of tools available to the client.

LiveClientSetupDict:
  context_window_compression: Configuration for context window compression.
  generation_config: Settings for controlling response generation.
  input_audio_transcription: Configuration for input audio transcription.
  model: Specifies the model to be used.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Settings related to the client's proactivity.
  session_resumption: Configuration for resuming previous sessions.
  system_instruction: Instructions provided to the system.
  tools: A list of tools available to the client.
```

----------------------------------------

TITLE: SupervisedTuningDataStatsDict Fields
DESCRIPTION: Provides details on the fields available within the SupervisedTuningDataStatsDict, which summarizes statistics for supervised tuning datasets. Includes total tuning character count, truncated example indices, dataset example counts, tuning steps, and user input/output token distributions.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_412

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStatsDict:
  total_tuning_character_count: Total number of characters used in tuning.
  truncated_example_indices: Indices of examples that were truncated.
  tuning_dataset_example_count: The total number of examples in the tuning dataset.
  tuning_step_count: The number of tuning steps performed.
  user_dataset_examples: User-provided examples for tuning.
  user_input_token_distribution: Distribution of token counts for user inputs.
  user_message_per_example_distribution: Distribution of user messages per example.
  user_output_token_distribution: Distribution of token counts for model outputs.
```

----------------------------------------

TITLE: TuningExampleDict Attributes
DESCRIPTION: Outlines the attributes of the TuningExampleDict type, a dictionary representation of TuningExample. It provides access to output and text_input for tuning examples.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_430

LANGUAGE: APIDOC
CODE:
```
TuningExampleDict:
  output: The desired output for the given input.
  text_input: The input text for the tuning example.
```

----------------------------------------

TITLE: Set Proxy Environment Variables
DESCRIPTION: Provides examples of setting environment variables for HTTPS proxy and SSL certificate files to configure proxy settings for the client.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_6

LANGUAGE: bash
CODE:
```
export HTTPS_PROXY='http://username:password@proxy_uri:port'
export SSL_CERT_FILE='client.pem'
```

----------------------------------------

TITLE: GenAI Live Client and Related Types
DESCRIPTION: This section details types related to the live client functionality in the genai library, including configurations, content, messages, and setup parameters for both general live clients and specialized live music clients.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_202

LANGUAGE: python
CODE:
```
genai.types.LiveClientContentDict
genai.types.LiveClientMessageDict
genai.types.LiveClientRealtimeInputDict
genai.types.LiveClientSetupDict
genai.types.LiveClientToolResponseDict
genai.types.LiveConnectConfigDict
genai.types.LiveConnectConstraintsDict
genai.types.LiveConnectParametersDict
genai.types.LiveMusicClientContentDict
genai.types.LiveMusicClientMessageDict
genai.types.LiveMusicClientSetupDict
genai.types.LiveMusicConnectParametersDict
genai.types.LiveMusicFilteredPromptDict
genai.types.LiveMusicGenerationConfigDict
genai.types.LiveMusicPlaybackControl
genai.types.LiveMusicServerContentDict
genai.types.LiveMusicServerMessageDict
genai.types.LiveMusicServerSetupCompleteDict
genai.types.LiveMusicSetConfigParametersDict
genai.types.LiveMusicSetWeightedPromptsParametersDict
genai.types.LiveMusicSourceMetadataDict
genai.types.LiveSendRealtimeInputParametersDict
```

----------------------------------------

TITLE: File Get
DESCRIPTION: Shows how to retrieve information about an uploaded file. This involves uploading a file first and then using its name to fetch its details.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_51

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file_info = client.files.get(name=file1.name)
```

----------------------------------------

TITLE: LiveMusicServerSetupComplete Types
DESCRIPTION: Represents the completion status of the Live Music Server setup, with both a class and its dictionary representation.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_312

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerSetupComplete: (No specific fields documented)

LiveMusicServerSetupCompleteDict: (No specific fields documented)
```

----------------------------------------

TITLE: LiveServerSetupComplete Attributes
DESCRIPTION: Details the LiveServerSetupComplete type, which signifies the completion of the server setup process. It primarily contains the session ID associated with the completed setup.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_252

LANGUAGE: APIDOC
CODE:
```
LiveServerSetupComplete:
  session_id: The unique identifier for the server session.
```

----------------------------------------

TITLE: Generate Images with Imagen (Python)
DESCRIPTION: Provides an example of generating images using the Imagen models. This snippet shows how to specify the model, prompt, and configuration options like the number of images, output format, person generation policy, and aspect ratio.

SOURCE: https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md#_snippet_15

LANGUAGE: python
CODE:
```
from google import genai
from PIL import Image
from io import BytesIO

client = genai.Client()

result = client.models.generate_images(
    model='imagen-3.0-generate-002',
    prompt="Image of a cat",
    config=dict(
        number_of_images=1, # 1 to 4
        output_mime_type="image/jpeg",
        person_generation="ALLOW_ADULT" # 'ALLOW_ALL' (but not in Europe/Mena), 'DONT_ALLOW' or 'ALLOW_ADULT'
        aspect_ratio="1:1" # "1:1", "3:4", "4:3", "9:16", or "16:9"
    )
)

for generated_image in result.generated_images:
   image = Image.open(BytesIO(generated_image.image.image_bytes))
```

----------------------------------------

TITLE: LiveClientSetup and LiveClientSetupDict Properties
DESCRIPTION: Details the properties available for LiveClientSetup and LiveClientSetupDict, which are used to configure live client interactions. These include settings for audio transcription, model selection, proactivity, session resumption, system instructions, and tools.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_292

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  input_audio_transcription: Configures input audio transcription settings.
  model: Specifies the model to be used for the live client.
  output_audio_transcription: Configures output audio transcription settings.
  proactivity: Controls the proactivity of the client.
  session_resumption: Enables or configures session resumption.
  system_instruction: Sets the system-level instructions for the client.
  tools: Defines the tools available for the client.

LiveClientSetupDict:
  context_window_compression: Configures context window compression.
  generation_config: Specifies generation configuration parameters.
  input_audio_transcription: Configures input audio transcription settings.
  model: Specifies the model to be used for the live client.
  output_audio_transcription: Configures output audio transcription settings.
  proactivity: Controls the proactivity of the client.
  session_resumption: Enables or configures session resumption.
  system_instruction: Sets the system-level instructions for the client.
  tools: Defines the tools available for the client.
```

----------------------------------------

TITLE: TuningDataset Fields
DESCRIPTION: Details the fields for TuningDataset, including 'examples', 'gcs_uri', and 'vertex_dataset_resource'. These fields specify the source and content of the tuning dataset.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_387

LANGUAGE: APIDOC
CODE:
```
TuningDataset:
  examples: list[TuningExample]
    A list of examples in the tuning dataset.
  gcs_uri: str
    The Google Cloud Storage URI for the dataset.
  vertex_dataset_resource: str
    The Vertex AI dataset resource name.
```

----------------------------------------

TITLE: GenAI Live Session Method
DESCRIPTION: Documentation for the `start_stream` method within the `genai.live.AsyncSession` class, used to initiate a streaming session.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_330

LANGUAGE: APIDOC
CODE:
```
genai.live.AsyncSession.start_stream():
  Description: Starts a streaming session for asynchronous communication.
  Usage:
    await session.start_stream()
  Returns:
    None
```

----------------------------------------

TITLE: Generate Content (Asynchronous)
DESCRIPTION: Provides an example of asynchronous content generation using the `client.aio` interface. This allows non-blocking calls for improved application performance.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_42

LANGUAGE: python
CODE:
```
response = await client.aio.models.generate_content(
    model='gemini-2.0-flash-001', contents='Tell me a story in 300 words.'
)

print(response.text)
```

----------------------------------------

TITLE: Session ID Attribute
DESCRIPTION: Details the session ID attribute for live server setup completion events.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_322

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveServerSetupComplete.session_id
genai.types.LiveServerSetupCompleteDict.session_id

Description: The unique identifier for the current session.
```

----------------------------------------

TITLE: Model Configuration - System Instructions and Typed Config
DESCRIPTION: Details how to set system instructions and utilize typed configurations for models.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_466

LANGUAGE: APIDOC
CODE:
```
System Instructions:
  # Set system instructions for the model
  # model.start_chat(system_instruction="You are a helpful assistant.")

Typed Config:
  # Example of typed configuration for a model
  # from genai.types import ToolConfig, FunctionDeclaration
  # tool_config = ToolConfig(function_declarations=[...])
  # model.generate_content(..., tool_config=tool_config)
```

----------------------------------------

TITLE: Python: Run GenAI Client with Stdio Connection
DESCRIPTION: Demonstrates setting up server parameters for a stdio connection and running an asynchronous client session to generate content. It includes initializing the session, sending a prompt with function declarations, and printing the response.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_33

LANGUAGE: python
CODE:
```
import asyncio
from datetime import datetime
from google.generativeai.types import GenerateContentConfig
from google.generativeai.client import stdio_client
from google.generativeai.client import ClientSession
from google.generativeai.types import StdioServerParameters

# Assume 'client' is an initialized genai client instance
# For demonstration, we'll mock it or assume it's globally available.
# import google.generativeai as genai
# client = genai.GenerativeModel('gemini-2.5-flash')

# Placeholder for the actual client object if not globally defined
class MockGenAIClient:
    def __init__(self):
        self.aio = self.AioClient()

    class AioClient:
        def __init__(self):
            self.models = self.ModelsClient()

        class ModelsClient:
            async def generate_content(self, model, contents, config):
                # Mock response
                class MockResponse:
                    def __init__(self, text):
                        self.text = text
                return MockResponse(f"Mock response for: {contents}")

client = MockGenAIClient() # Use this mock if genai client is not available

# Create server parameters for stdio connection
server_params = StdioServerParameters(
    command="npx",  # Executable
    args=["-y", "@philschmid/weather-mcp"],  # MCP Server
    env=None,  # Optional environment variables
)

async def run():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Prompt to get the weather for the current day in London.
            prompt = f"What is the weather in London in {datetime.now().strftime('%Y-%m-%d')}"

            # Initialize the connection between client and server
            await session.initialize()

            # Send request to the model with MCP function declarations
            response = await client.aio.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=GenerateContentConfig(
                    temperature=0,
                    tools=[session],  # uses the session, will automatically call the tool using automatic function calling
                ),
            )
            print(response.text)

# Start the asyncio event loop and run the main function
# asyncio.run(run())

```

----------------------------------------

TITLE: SupervisedTuningDataStatsDict Fields
DESCRIPTION: Details the fields within the SupervisedTuningDataStatsDict, encompassing dropped example reasons, billable character and token counts, total truncated examples, tuning character count, and various distribution statistics.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_359

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStatsDict:
  dropped_example_reasons: List[str]
    Reasons why examples were dropped during tuning.
  total_billable_character_count: int
    Total billable character count for the tuning process.
  total_billable_token_count: int
    Total billable token count for the tuning process.
  total_truncated_example_count: int
    Total count of truncated examples.
  total_tuning_character_count: int
    Total character count of the tuning dataset.
  truncated_example_indices: List[int]
    Indices of examples that were truncated.
  tuning_dataset_example_count: int
    The total number of examples in the tuning dataset.
  tuning_step_count: int
    The number of tuning steps performed.
  user_dataset_examples: List[Dict]
    A list of examples from the user's dataset.
  user_input_token_distribution: Dict
    Token distribution for user input.
  user_message_per_example_distribution: Dict
    Distribution of user messages per example.
  user_output_token_distribution: Dict
    Token distribution for user output.
```

----------------------------------------

TITLE: TuningDatasetDict Fields
DESCRIPTION: Outlines the fields within TuningDatasetDict, mirroring TuningDataset with 'examples', 'gcs_uri', and 'vertex_dataset_resource'. This dictionary format specifies tuning dataset details.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_388

LANGUAGE: APIDOC
CODE:
```
TuningDatasetDict:
  examples: list[TuningExampleDict]
    A list of examples in the tuning dataset.
  gcs_uri: str
    The Google Cloud Storage URI for the dataset.
  vertex_dataset_resource: str
    The Vertex AI dataset resource name.
```

----------------------------------------

TITLE: Tune Operation (Supervised Fine-Tuning)
DESCRIPTION: Illustrates the setup for supervised fine-tuning (tuning) of models, specifically for Vertex AI. It shows how to define the training dataset using provided URIs.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_65

LANGUAGE: python
CODE:
```
from google.genai import types

model = 'gemini-2.0-flash-001'
training_dataset = types.TuningDataset(
    # Vertex AI supports tuning from GCS source
)
```

----------------------------------------

TITLE: Create Client Using Environment Variables
DESCRIPTION: Initializes the genai.Client by automatically detecting credentials and configuration from environment variables.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_6

LANGUAGE: python
CODE:
```
from google import genai

client = genai.Client()
```

----------------------------------------

TITLE: Configure Aiohttp for Faster Async Client
DESCRIPTION: Enables the use of aiohttp for faster asynchronous operations by installing the 'google-genai[aiohttp]' extra. Allows passing additional arguments to aiohttp.ClientSession.request via async_client_args.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_9

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai import Client

http_options = types.HttpOptions(
    async_client_args={'cookies': ..., 'ssl': ...},
)

client=Client(..., http_options=http_options)
```

----------------------------------------

TITLE: Files - Upload, Get, and Delete
DESCRIPTION: Details the file management operations: uploading files, retrieving file information, and deleting files.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_477

LANGUAGE: APIDOC
CODE:
```
Files:
  # Upload
  # with open('my_document.pdf', 'rb') as f:
  #     file = genai.upload_file(name='my_document.pdf', file=f)
  # print(f'Uploaded file: {file.name}')

  # Get
  # file_info = genai.get_file('file-id')
  # print(f'File details: {file_info}')

  # Delete
  # genai.delete_file('file-id')
```

----------------------------------------

TITLE: Interval Time Range
DESCRIPTION: Represents a time interval with a start and end time.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_195

LANGUAGE: APIDOC
CODE:
```
Interval:
  end_time: The end time of the interval.
  start_time: The start time of the interval.
```

----------------------------------------

TITLE: Configure Gemini API System Instructions
DESCRIPTION: Demonstrates how to use system instructions to guide the model's behavior. A `system_instruction` string can be provided within `GenerateContentConfig` to set a persona or specific guidelines for the model's responses.

SOURCE: https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md#_snippet_8

LANGUAGE: Python
CODE:
```
from google import genai
from google.genai import types

client = genai.Client()

config = types.GenerateContentConfig(
    system_instruction="You are a pirate",
)

response = client.models.generate_content(
    model='gemini-2.5-flash',
    config=config,
)

print(response.text)
```

----------------------------------------

TITLE: Generate Text Response with Gemini API
DESCRIPTION: Demonstrates basic text generation using the Gemini API. It shows how to initialize the client, specify a model, and send a text prompt to get a response. The output text is often in markdown format.

SOURCE: https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md#_snippet_3

LANGUAGE: Python
CODE:
```
from google import genai

client = genai.Client()

response = client.models.generate_content(
  model='gemini-2.5-flash',
  contents='why is the sky blue?',
)

print(response.text) # output is often markdown
```

----------------------------------------

TITLE: CreateTuningJobConfig Options
DESCRIPTION: Details the configuration parameters for creating a tuning job, including adapter size, batch size, learning rate, and dataset specifications.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_57

LANGUAGE: APIDOC
CODE:
```
CreateTuningJobConfig:
  adapter_size: Size of the adapter for tuning.
  batch_size: Batch size for training.
  description: Description of the tuning job.
  epoch_count: Number of epochs for training.
  export_last_checkpoint_only: Whether to export only the last checkpoint.
  http_options: HTTP options for the tuning job request.
  learning_rate: Learning rate for the tuning process.
  learning_rate_multiplier: Multiplier for the learning rate.
  tuned_model_display_name: Display name for the tuned model.
  validation_dataset: The dataset to use for validation.

CreateTuningJobConfigDict:
  adapter_size: Size of the adapter for tuning.
  batch_size: Batch size for training.
  description: Description of the tuning job.
  epoch_count: Number of epochs for training.
  export_last_checkpoint_only: Whether to export only the last checkpoint.
  http_options: HTTP options for the tuning job request.
  learning_rate: Learning rate for the tuning process.
  learning_rate_multiplier: Multiplier for the learning rate.
  tuned_model_display_name: Display name for the tuned model.
  validation_dataset: The dataset to use for validation.
```

----------------------------------------

TITLE: Create Gemini Developer API Client
DESCRIPTION: Initializes a client for the Gemini Developer API using an API key. Ensure you have your GEMINI_API_KEY set.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_0

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Gemini Developer API
client = genai.Client(api_key='GEMINI_API_KEY')
```

----------------------------------------

TITLE: Interval and IntervalDict
DESCRIPTION: Represents a time interval with start and end times. IntervalDict is the dictionary representation.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_261

LANGUAGE: APIDOC
CODE:
```
Interval:
  Represents a time interval.
  Attributes:
    end_time: The end time of the interval.
    start_time: The start time of the interval.

IntervalDict:
  A dictionary representation of Interval.
  Attributes:
    end_time: The end time of the interval.
    start_time: The start time of the interval.
```

----------------------------------------

TITLE: Configure Socks5 Proxy for httpx
DESCRIPTION: Enables SOCKS5 proxy support for the httpx client by installing 'httpx[socks]'. The proxy can be passed via client_args or async_client_args in HttpOptions.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_11

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai import Client

http_options = types.HttpOptions(
    client_args={'proxy': 'socks5://user:pass@host:port'},
    async_client_args={'proxy': 'socks5://user:pass@host:port'},
)

client=Client(..., http_options=http_options)
```

----------------------------------------

TITLE: LiveClientMessage Fields
DESCRIPTION: Defines the structure of a live client message, encompassing client content, real-time input, setup, and tool responses.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_287

LANGUAGE: APIDOC
CODE:
```
LiveClientMessage:
  client_content: Optional[LiveClientContent]
    The content of the client message.
  realtime_input: Optional[LiveClientRealtimeInput]
    Real-time input from the client.
  setup: Optional[LiveClientSetup]
    Setup information for the client.
  tool_response: Optional[Dict[str, Any]]
    A response from a tool.
```

----------------------------------------

TITLE: Citation Properties
DESCRIPTION: Details the properties of the Citation object, including start index, title, and URI.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_111

LANGUAGE: APIDOC
CODE:
```
Citation:
  start_index: Index where the citation begins.
  title: The title of the cited source.
  uri: The Uniform Resource Identifier for the citation.
```

----------------------------------------

TITLE: LiveConnectConfig Parameters
DESCRIPTION: Outlines the configuration options for establishing a live connection, including context window compression, affective dialog enablement, generation configuration, HTTP options, audio transcription settings, maximum output tokens, media resolution, and output audio transcription.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_227

LANGUAGE: APIDOC
CODE:
```
LiveConnectConfig:
  context_window_compression: Configuration for context window compression.
  enable_affective_dialog: Enables or disables affective dialog features.
  generation_config: Settings for controlling response generation.
  http_options: Options for configuring HTTP requests.
  input_audio_transcription: Configuration for input audio transcription.
  max_output_tokens: The maximum number of tokens for the output.
  media_resolution: The resolution setting for media.
  output_audio_transcription: Configuration for output audio transcription.
```

----------------------------------------

TITLE: Generate Content (Asynchronous Non-Streaming)
DESCRIPTION: Provides an example of asynchronous content generation. This method returns the complete response after the model finishes processing.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_35

LANGUAGE: python
CODE:
```
response = await client.aio.models.generate_content(
    model='gemini-2.0-flash-001', contents='Tell me a story in 300 words.'
)

print(response.text)
```

----------------------------------------

TITLE: Delete Batch Job Resource
DESCRIPTION: Provides an example of how to delete a batch job resource using its name.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_71

LANGUAGE: python
CODE:
```
# Delete the job resource
delete_job = client.batches.delete(name=job.name)

delete_job
```

----------------------------------------

TITLE: Create Client Using Environment Variables
DESCRIPTION: Initializes the genai client when environment variables are properly configured for either Gemini API or Vertex AI. The client automatically picks up the necessary credentials and settings.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_6

LANGUAGE: python
CODE:
```
from google import genai

client = genai.Client()
```

----------------------------------------

TITLE: Generate Content with System Instructions
DESCRIPTION: Demonstrates how to generate content using the `generate_content` method with system instructions, max output tokens, and temperature settings. This allows for fine-grained control over the model's response style and length.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_18

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='high',
    config=types.GenerateContentConfig(
        system_instruction='I say high, you say low',
        max_output_tokens=3,
        temperature=0.3,
    ),
)
print(response.text)
```

----------------------------------------

TITLE: IntervalDict Time Range
DESCRIPTION: Defines the dictionary-based representation for a time interval, including start and end times.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_196

LANGUAGE: APIDOC
CODE:
```
IntervalDict:
  end_time: The end time of the interval.
  start_time: The start time of the interval.
```

----------------------------------------

TITLE: Create Client using Environment Variables
DESCRIPTION: Creates a client by leveraging environment variables for API key and Vertex AI configuration. Supports both Gemini Developer API and Vertex AI.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_2

LANGUAGE: bash
CODE:
```
# For Gemini Developer API:
export GOOGLE_API_KEY='your-api-key'

# For Gemini API in Vertex AI:
export GOOGLE_GENAI_USE_VERTEXAI=true
export GOOGLE_CLOUD_PROJECT='your-project-id'
export GOOGLE_CLOUD_LOCATION='us-central1'
```

LANGUAGE: python
CODE:
```
from google import genai

client = genai.Client()
```

----------------------------------------

TITLE: Citation
DESCRIPTION: Provides information about a citation, including its start and end index within the text, license, and publication date.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_110

LANGUAGE: APIDOC
CODE:
```
Citation:
  end_index: int
  license: str
  publication_date: str
```

----------------------------------------

TITLE: Schema Definition Properties
DESCRIPTION: Defines properties for schema objects, used for describing data structures, including validation and examples.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_394

LANGUAGE: APIDOC
CODE:
```
Schema:
  additional_properties: Allows or disallows additional properties not defined in the schema.
  any_of: An array of schemas, where the data must validate against at least one of them.
  default: A default value for the property.
  defs: A dictionary of reusable schemas.
  description: A description of the property.
  enum: An enumeration of allowed values for the property.
  example: An example value for the property.
  format: The format of the property (e.g., 'date-time', 'email').
  items: Defines the properties of an array.
  max_items: The maximum number of items allowed in an array.
  max_length: The maximum length of a string.
  max_properties: The maximum number of properties allowed in an object.
  maximum: The maximum allowed value for a number.
  min_items: The minimum number of items allowed in an array.
  min_length: The minimum length of a string.
  min_properties: The minimum number of properties allowed in an object.
  minimum: The minimum allowed value for a number.
```

----------------------------------------

TITLE: Configure Async Client with Aiohttp
DESCRIPTION: Demonstrates how to configure the SDK to use aiohttp for faster asynchronous operations by passing client arguments to HttpOptions.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_9

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai import Client

http_options = types.HttpOptions(
    async_client_args={'cookies': ..., 'ssl': ...},
)

client=Client(..., http_options=http_options)
```

----------------------------------------

TITLE: Create Vertex AI API Client
DESCRIPTION: Initializes a client for the Vertex AI API, requiring project ID and location. Set vertexai=True for Vertex AI integration.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_1

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Vertex AI API
client = genai.Client(
    vertexai=True, project='your-project-id', location='us-central1'
)
```

----------------------------------------

TITLE: VideoMetadataDict Attributes
DESCRIPTION: Details the attributes available within the VideoMetadataDict, including frames per second (fps) and start offset.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_461

LANGUAGE: APIDOC
CODE:
```
VideoMetadataDict.fps:
  Type: float
  Description: Frames per second of the video.

VideoMetadataDict.start_offset:
  Type: datetime.timedelta
  Description: The start offset of the video segment.
```

----------------------------------------

TITLE: Create Gemini Developer API Client
DESCRIPTION: Initializes a client for the Gemini Developer API. Requires an API key, which should be securely managed.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_2

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Gemini Developer API
client = genai.Client(api_key='GEMINI_API_KEY')
```

----------------------------------------

TITLE: Upload and Get File
DESCRIPTION: Uploads a file using the client and then retrieves its information. This is useful for managing data associated with generative AI tasks.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_61

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file_info = client.files.get(name=file1.name)
```

----------------------------------------

TITLE: Configuring Model Generation with System Instructions
DESCRIPTION: Shows how to configure the `generate_content` method with system instructions, token limits, and temperature for controlling model behavior. It highlights the use of `GenerateContentConfig`.

SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_23

LANGUAGE: python
CODE:
```
from google.genai import types

# Assuming 'client' is an initialized genai client instance
response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='high',
    config=types.GenerateContentConfig(
        system_instruction='I say high, you say low',
        max_output_tokens=3,
        temperature=0.3,
    ),
)
print(response.text)
```

----------------------------------------

TITLE: Download File for Upload
DESCRIPTION: Shows how to download a file from a given URL using `wget`. This is a prerequisite for uploading files to the Gemini API.

SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_13

LANGUAGE: shell
CODE:
```
!wget -q https://storage.googleapis.com/generativeai-downloads/data/a11.txt
```